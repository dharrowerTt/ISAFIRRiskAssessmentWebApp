Imports System.Data.SqlClient

Partial Class VulnerabilitySection
    Inherits System.Web.UI.Page

    Private Section As String
    Private demoMode As Boolean = False

    Protected Sub Page_Load(sender As Object, e As EventArgs) Handles Me.Load
        Section = Request.QueryString("section")
        If String.IsNullOrEmpty(Section) Then
            Response.Redirect("VulnerabilityAssessmentIntro.aspx")
            Return
        End If

        demoMode = (Request.QueryString("demo") = "true")

        If Not IsPostBack Then
            If demoMode Then
                hfAssessmentID.Value = "0"
                LoadDemoAssessmentInfo()
            Else
                Dim assessmentId As String = Request.QueryString("assessment_id")
                If String.IsNullOrEmpty(assessmentId) Then
                    Response.Redirect("VulnerabilityAssessmentIntro.aspx")
                    Return
                End If
                hfAssessmentID.Value = assessmentId
                LoadAssessmentInfo(Convert.ToInt32(assessmentId))
            End If

            LoadQuestions()
        End If
    End Sub

    Private Sub LoadAssessmentInfo(assessmentId As Integer)
        ' TODO: Replace with actual session/database values
        litAssessmentID.Text = assessmentId.ToString()
        litFacility.Text = "Loaded Facility"
        litAssessor.Text = "Loaded Assessor"
        litContact.Text = "Loaded Contact"
        litStartDate.Text = Date.Today.ToShortDateString()
        litSectionTitle.Text = GetSectionTitle(Section)
    End Sub

    Private Sub LoadDemoAssessmentInfo()
        litAssessmentID.Text = "DEMO"
        litFacility.Text = "Demo Facility"
        litAssessor.Text = "Demo User"
        litContact.Text = "(000) 000-0000 / demo@example.com"
        litStartDate.Text = "N/A"
        litSectionTitle.Text = GetSectionTitle(Section)
    End Sub

    Private Sub LoadQuestions()
        Dim dt As New DataTable()

        If demoMode Then
            ' Sample hardcoded demo data
            dt.Columns.Add("QuestionID", GetType(Integer))
            dt.Columns.Add("QuestionText", GetType(String))
            dt.Columns.Add("HelpText", GetType(String))

            dt.Rows.Add(1, "Does your facility have a resilience plan?", "A resilience plan helps ensure operations continue during disruption.")
            dt.Rows.Add(2, "Have you conducted a vulnerability assessment in the last year?", "Assessments identify weak points in infrastructure and operations.")
        Else
            Using conn As New SqlConnection(ConfigurationManager.ConnectionStrings("YourConnString").ConnectionString)
                Using cmd As New SqlCommand("SELECT QuestionID, QuestionText, HelpText FROM Question_LU WHERE Category = @Category AND IncludeYN = 1 ORDER BY DisplayOrder", conn)
                    cmd.Parameters.AddWithValue("@Category", Section)
                    Using da As New SqlDataAdapter(cmd)
                        da.Fill(dt)
                    End Using
                End Using
            End Using
        End If

        rptQuestions.DataSource = dt
        rptQuestions.DataBind()
    End Sub

    Private Function GetSectionTitle(sectionKey As String) As String
        Select Case sectionKey.ToLower()
            Case "resilience" : Return "Resilience Management"
            Case "security" : Return "Physical Security Management"
            Case "dependencies" : Return "Facility Dependencies"
            Case "cyber" : Return "Cybersecurity Management"
            Case Else : Return "Vulnerability Section"
        End Select
    End Function

    Protected Sub btnSave_Click(sender As Object, e As EventArgs)
        If demoMode Then Exit Sub

        Dim assessmentID As Integer = Integer.Parse(hfAssessmentID.Value)

        For Each item As RepeaterItem In rptQuestions.Items
            Dim rbl As RadioButtonList = CType(item.FindControl("rblAnswer"), RadioButtonList)
            Dim lblQID As Label = CType(item.FindControl("lblQuestionID"), Label)
            If rbl IsNot Nothing AndAlso lblQID IsNot Nothing Then
                Dim questionID = Convert.ToInt32(lblQID.Text)
                Dim response = rbl.SelectedValue

                If Not String.IsNullOrEmpty(response) Then
                    SaveResponse(assessmentID, questionID, response)
                End If
            End If
        Next
    End Sub

    Private Sub SaveResponse(assessmentID As Integer, questionID As Integer, response As String)
        Using conn As New SqlConnection(ConfigurationManager.ConnectionStrings("YourConnString").ConnectionString)
            Using cmd As New SqlCommand("MERGE INTO VulnerabilityResponses AS target " &
                                        "USING (SELECT @AID AS AssessmentID, @QID AS QuestionID) AS source " &
                                        "ON (target.AssessmentID = source.AssessmentID AND target.QuestionID = source.QuestionID) " &
                                        "WHEN MATCHED THEN UPDATE SET Response = @Response " &
                                        "WHEN NOT MATCHED THEN INSERT (AssessmentID, QuestionID, Response) VALUES (@AID, @QID, @Response);", conn)
                cmd.Parameters.AddWithValue("@AID", assessmentID)
                cmd.Parameters.AddWithValue("@QID", questionID)
                cmd.Parameters.AddWithValue("@Response", response)
                conn.Open()
                cmd.ExecuteNonQuery()
            End Using
        End Using
    End Sub

    Protected Sub btnSubmitVulnerability_Click(sender As Object, e As EventArgs)
        If demoMode Then
            ClientScript.RegisterStartupScript(Me.GetType(), "demoAlert", "alert('Demo mode: No data was saved.');", True)
            Return
        End If

        Using conn As New SqlConnection(ConfigurationManager.ConnectionStrings("YourConnString").ConnectionString)
            conn.Open()
            
            ' Clear existing vulnerability data for this assessment
            Dim clearCmd As New SqlCommand("DELETE FROM Vulnerability WHERE assessment_id = @AID", conn)
            clearCmd.Parameters.AddWithValue("@AID", Convert.ToInt32(hfAssessmentID.Value))
            clearCmd.ExecuteNonQuery()

            ' Save vulnerability assessments
            For Each row As RepeaterItem In rptVulnerabilities.Items
                Dim vulnerabilityId As Integer = Convert.ToInt32(DataBinder.Eval(row.DataItem, "ID"))
                Dim rating As DropDownList = row.FindControl($"ddlRating_{vulnerabilityId}")
                Dim notes As TextBox = row.FindControl($"txtNotes_{vulnerabilityId}")
                
                If rating IsNot Nothing AndAlso Not String.IsNullOrEmpty(rating.SelectedValue) Then
                    Dim cmd As New SqlCommand("
                        INSERT INTO Vulnerability (assessment_id, vulnerability_id, rating, notes)
                        VALUES (@AID, @VID, @Rating, @Notes)", conn)
                    
                    cmd.Parameters.AddWithValue("@AID", Convert.ToInt32(hfAssessmentID.Value))
                    cmd.Parameters.AddWithValue("@VID", vulnerabilityId)
                    cmd.Parameters.AddWithValue("@Rating", Convert.ToInt32(rating.SelectedValue))
                    cmd.Parameters.AddWithValue("@Notes", If(notes IsNot Nothing, notes.Text, DBNull.Value))
                    cmd.ExecuteNonQuery()
                End If
            Next

            ' Mark assessment as complete
            Dim updateCmd As New SqlCommand("
                UPDATE Assessment 
                SET is_complete = 1, 
                    completion_date = GETDATE() 
                WHERE ID = @AID", conn)
            updateCmd.Parameters.AddWithValue("@AID", Convert.ToInt32(hfAssessmentID.Value))
            updateCmd.ExecuteNonQuery()
        End Using

        ' Navigate to Assessment Overview
        Response.Redirect($"AssessmentOverview.aspx?id={hfAssessmentID.Value}")
    End Sub
End Class
